// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	answerLogsFieldNames          = builder.RawFieldNames(&AnswerLogs{})
	answerLogsRows                = strings.Join(answerLogsFieldNames, ",")
	answerLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(answerLogsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	answerLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(answerLogsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerAnswerLogsIdPrefix = "cache:biggerStronger:answerLogs:id:"
)

type (
	answerLogsModel interface {
		Insert(ctx context.Context, data *AnswerLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AnswerLogs, error)
		Update(ctx context.Context, data *AnswerLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnswerLogsModel struct {
		sqlc.CachedConn
		table string
	}

	AnswerLogs struct {
		Id     int64  `db:"id"`
		Qid    int64  `db:"qid"`    // 题目ID
		Uid    int64  `db:"uid"`    // 用户ID
		Answer string `db:"answer"` // 回答的答案
		Right  int64  `db:"right"`  // 是否正确
		Time   int64  `db:"time"`   // 时间
		Sid    int64  `db:"sid"`    // 所属用户答题统计记录
	}
)

func newAnswerLogsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnswerLogsModel {
	return &defaultAnswerLogsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`answer_logs`",
	}
}

func (m *defaultAnswerLogsModel) Insert(ctx context.Context, data *AnswerLogs) (sql.Result, error) {
	biggerStrongerAnswerLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerLogsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, answerLogsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Qid, data.Uid, data.Answer, data.Right, data.Time, data.Sid)
	}, biggerStrongerAnswerLogsIdKey)
	return ret, err
}

func (m *defaultAnswerLogsModel) FindOne(ctx context.Context, id int64) (*AnswerLogs, error) {
	biggerStrongerAnswerLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerLogsIdPrefix, id)
	var resp AnswerLogs
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerAnswerLogsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerLogsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnswerLogsModel) Update(ctx context.Context, data *AnswerLogs) error {
	biggerStrongerAnswerLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerLogsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, answerLogsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Qid, data.Uid, data.Answer, data.Right, data.Time, data.Sid, data.Id)
	}, biggerStrongerAnswerLogsIdKey)
	return err
}

func (m *defaultAnswerLogsModel) Delete(ctx context.Context, id int64) error {
	biggerStrongerAnswerLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerLogsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerAnswerLogsIdKey)
	return err
}

func (m *defaultAnswerLogsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerLogsIdPrefix, primary)
}

func (m *defaultAnswerLogsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerLogsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnswerLogsModel) tableName() string {
	return m.table
}
