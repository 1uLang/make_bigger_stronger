// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	settingsFieldNames          = builder.RawFieldNames(&Settings{})
	settingsRows                = strings.Join(settingsFieldNames, ",")
	settingsRowsExpectAutoSet   = strings.Join(stringx.Remove(settingsFieldNames, "`create_time`", "`update_time`"), ",")
	settingsRowsWithPlaceHolder = strings.Join(stringx.Remove(settingsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerSettingsIdPrefix  = "cache:biggerStronger:settings:id:"
	cacheBiggerStrongerSettingsKeyPrefix = "cache:biggerStronger:settings:key:"
)

type (
	settingsModel interface {
		Insert(ctx context.Context, data *Settings) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Settings, error)
		FindOneByKey(ctx context.Context, key string) (*Settings, error)
		Update(ctx context.Context, data *Settings) error
		Delete(ctx context.Context, id int64) error
	}

	defaultSettingsModel struct {
		sqlc.CachedConn
		table string
	}

	Settings struct {
		Key   string `db:"key"`
		Value string `db:"value"`
		Id    int64  `db:"id"`
	}
)

func newSettingsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSettingsModel {
	return &defaultSettingsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`settings`",
	}
}

func (m *defaultSettingsModel) Insert(ctx context.Context, data *Settings) (sql.Result, error) {
	biggerStrongerSettingsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsIdPrefix, data.Id)
	biggerStrongerSettingsKeyKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsKeyPrefix, data.Key)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, settingsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Key, data.Value, data.Id)
	}, biggerStrongerSettingsIdKey, biggerStrongerSettingsKeyKey)
	return ret, err
}

func (m *defaultSettingsModel) FindOne(ctx context.Context, id int64) (*Settings, error) {
	biggerStrongerSettingsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsIdPrefix, id)
	var resp Settings
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerSettingsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", settingsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSettingsModel) FindOneByKey(ctx context.Context, key string) (*Settings, error) {
	biggerStrongerSettingsKeyKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsKeyPrefix, key)
	var resp Settings
	err := m.QueryRowIndexCtx(ctx, &resp, biggerStrongerSettingsKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `key` = ? limit 1", settingsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, key); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSettingsModel) Update(ctx context.Context, data *Settings) error {
	biggerStrongerSettingsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsIdPrefix, data.Id)
	biggerStrongerSettingsKeyKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsKeyPrefix, data.Key)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, settingsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Key, data.Value, data.Id)
	}, biggerStrongerSettingsIdKey, biggerStrongerSettingsKeyKey)
	return err
}

func (m *defaultSettingsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	biggerStrongerSettingsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsIdPrefix, id)
	biggerStrongerSettingsKeyKey := fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsKeyPrefix, data.Key)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerSettingsIdKey, biggerStrongerSettingsKeyKey)
	return err
}

func (m *defaultSettingsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerSettingsIdPrefix, primary)
}

func (m *defaultSettingsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", settingsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSettingsModel) tableName() string {
	return m.table
}
