// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	analyzingFieldNames          = builder.RawFieldNames(&Analyzing{})
	analyzingRows                = strings.Join(analyzingFieldNames, ",")
	analyzingRowsExpectAutoSet   = strings.Join(stringx.Remove(analyzingFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	analyzingRowsWithPlaceHolder = strings.Join(stringx.Remove(analyzingFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerAnalyzingIdPrefix = "cache:biggerStronger:analyzing:id:"
)

type (
	analyzingModel interface {
		Insert(ctx context.Context, data *Analyzing) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Analyzing, error)
		Update(ctx context.Context, data *Analyzing) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnalyzingModel struct {
		sqlc.CachedConn
		table string
	}

	Analyzing struct {
		Id         int64  `db:"id"`
		Uid        int64  `db:"uid"`   // 用户ID
		Qid        int64  `db:"qid"`   // 所属问题
		Text       string `db:"text"`  // 内容
		Liked      int64  `db:"liked"` // 点赞数
		Reply      int64  `db:"reply"` // 回复数
		CreateTime int64  `db:"create_time"`
	}
)

func newAnalyzingModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnalyzingModel {
	return &defaultAnalyzingModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`analyzing`",
	}
}

func (m *defaultAnalyzingModel) Insert(ctx context.Context, data *Analyzing) (sql.Result, error) {
	biggerStrongerAnalyzingIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnalyzingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, analyzingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Qid, data.Text, data.Liked, data.Reply)
	}, biggerStrongerAnalyzingIdKey)
	return ret, err
}

func (m *defaultAnalyzingModel) FindOne(ctx context.Context, id int64) (*Analyzing, error) {
	biggerStrongerAnalyzingIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnalyzingIdPrefix, id)
	var resp Analyzing
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerAnalyzingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", analyzingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnalyzingModel) Update(ctx context.Context, data *Analyzing) error {
	biggerStrongerAnalyzingIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnalyzingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, analyzingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Qid, data.Text, data.Liked, data.Reply, data.Id)
	}, biggerStrongerAnalyzingIdKey)
	return err
}

func (m *defaultAnalyzingModel) Delete(ctx context.Context, id int64) error {
	biggerStrongerAnalyzingIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnalyzingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerAnalyzingIdKey)
	return err
}

func (m *defaultAnalyzingModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerAnalyzingIdPrefix, primary)
}

func (m *defaultAnalyzingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", analyzingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnalyzingModel) tableName() string {
	return m.table
}
