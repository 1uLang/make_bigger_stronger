// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	answerStatLogsFieldNames          = builder.RawFieldNames(&AnswerStatLogs{})
	answerStatLogsRows                = strings.Join(answerStatLogsFieldNames, ",")
	answerStatLogsRowsExpectAutoSet   = strings.Join(stringx.Remove(answerStatLogsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	answerStatLogsRowsWithPlaceHolder = strings.Join(stringx.Remove(answerStatLogsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerAnswerStatLogsIdPrefix = "cache:biggerStronger:answerStatLogs:id:"
)

type (
	answerStatLogsModel interface {
		Insert(ctx context.Context, data *AnswerStatLogs) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*AnswerStatLogs, error)
		Update(ctx context.Context, data *AnswerStatLogs) error
		Delete(ctx context.Context, id int64) error
	}

	defaultAnswerStatLogsModel struct {
		sqlc.CachedConn
		table string
	}

	AnswerStatLogs struct {
		Id         int64  `db:"id"`
		Uid        int64  `db:"uid"`
		Stat       string `db:"stat"`
		CreateTime int64  `db:"create_time"`
	}
)

func newAnswerStatLogsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAnswerStatLogsModel {
	return &defaultAnswerStatLogsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`answer_stat_logs`",
	}
}

func (m *defaultAnswerStatLogsModel) Insert(ctx context.Context, data *AnswerStatLogs) (sql.Result, error) {
	biggerStrongerAnswerStatLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerStatLogsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, answerStatLogsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Uid, data.Stat)
	}, biggerStrongerAnswerStatLogsIdKey)
	return ret, err
}

func (m *defaultAnswerStatLogsModel) FindOne(ctx context.Context, id int64) (*AnswerStatLogs, error) {
	biggerStrongerAnswerStatLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerStatLogsIdPrefix, id)
	var resp AnswerStatLogs
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerAnswerStatLogsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerStatLogsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAnswerStatLogsModel) Update(ctx context.Context, data *AnswerStatLogs) error {
	biggerStrongerAnswerStatLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerStatLogsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, answerStatLogsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Uid, data.Stat, data.Id)
	}, biggerStrongerAnswerStatLogsIdKey)
	return err
}

func (m *defaultAnswerStatLogsModel) Delete(ctx context.Context, id int64) error {
	biggerStrongerAnswerStatLogsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerStatLogsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerAnswerStatLogsIdKey)
	return err
}

func (m *defaultAnswerStatLogsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerAnswerStatLogsIdPrefix, primary)
}

func (m *defaultAnswerStatLogsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", answerStatLogsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAnswerStatLogsModel) tableName() string {
	return m.table
}
