// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	replyFieldNames          = builder.RawFieldNames(&Reply{})
	replyRows                = strings.Join(replyFieldNames, ",")
	replyRowsExpectAutoSet   = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	replyRowsWithPlaceHolder = strings.Join(stringx.Remove(replyFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerReplyIdPrefix = "cache:biggerStronger:reply:id:"
)

type (
	replyModel interface {
		Insert(ctx context.Context, data *Reply) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Reply, error)
		Update(ctx context.Context, data *Reply) error
		Delete(ctx context.Context, id int64) error
	}

	defaultReplyModel struct {
		sqlc.CachedConn
		table string
	}

	Reply struct {
		Id         int64  `db:"id"`
		Aid        int64  `db:"aid"`         // 所属解析回复
		Rid        int64  `db:"rid"`         // 所属回复
		Text       string `db:"text"`        // 内容
		CreateTime int64  `db:"create_time"` // 创建时间
		Uid        int64  `db:"uid"`         // 所属用户
	}
)

func newReplyModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultReplyModel {
	return &defaultReplyModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`reply`",
	}
}

func (m *defaultReplyModel) Insert(ctx context.Context, data *Reply) (sql.Result, error) {
	biggerStrongerReplyIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerReplyIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, replyRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Aid, data.Rid, data.Text, data.Uid)
	}, biggerStrongerReplyIdKey)
	return ret, err
}

func (m *defaultReplyModel) FindOne(ctx context.Context, id int64) (*Reply, error) {
	biggerStrongerReplyIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerReplyIdPrefix, id)
	var resp Reply
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerReplyIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultReplyModel) Update(ctx context.Context, data *Reply) error {
	biggerStrongerReplyIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerReplyIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, replyRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Aid, data.Rid, data.Text, data.Uid, data.Id)
	}, biggerStrongerReplyIdKey)
	return err
}

func (m *defaultReplyModel) Delete(ctx context.Context, id int64) error {
	biggerStrongerReplyIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerReplyIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerReplyIdKey)
	return err
}

func (m *defaultReplyModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerReplyIdPrefix, primary)
}

func (m *defaultReplyModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", replyRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultReplyModel) tableName() string {
	return m.table
}
