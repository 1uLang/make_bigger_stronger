// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	questionsFieldNames          = builder.RawFieldNames(&Questions{})
	questionsRows                = strings.Join(questionsFieldNames, ",")
	questionsRowsExpectAutoSet   = strings.Join(stringx.Remove(questionsFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	questionsRowsWithPlaceHolder = strings.Join(stringx.Remove(questionsFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheBiggerStrongerQuestionsIdPrefix = "cache:biggerStronger:questions:id:"
)

type (
	questionsModel interface {
		Insert(ctx context.Context, data *Questions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Questions, error)
		Update(ctx context.Context, data *Questions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultQuestionsModel struct {
		sqlc.CachedConn
		table string
	}

	Questions struct {
		Id         int64  `db:"id"`
		Type       int64  `db:"type"`        // 所属题目类型ID
		Desc       string `db:"desc"`        // 题目描述
		Option     string `db:"option"`      // 题目选项
		Answer     string `db:"answer"`      // 题目答案
		Summary    string `db:"summary"`     // 题目考点
		CreateTime int64  `db:"create_time"` // 创建时间
	}
)

func newQuestionsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultQuestionsModel {
	return &defaultQuestionsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`questions`",
	}
}

func (m *defaultQuestionsModel) Insert(ctx context.Context, data *Questions) (sql.Result, error) {
	biggerStrongerQuestionsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerQuestionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, questionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Type, data.Desc, data.Option, data.Answer, data.Summary)
	}, biggerStrongerQuestionsIdKey)
	return ret, err
}

func (m *defaultQuestionsModel) FindOne(ctx context.Context, id int64) (*Questions, error) {
	biggerStrongerQuestionsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerQuestionsIdPrefix, id)
	var resp Questions
	err := m.QueryRowCtx(ctx, &resp, biggerStrongerQuestionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultQuestionsModel) Update(ctx context.Context, data *Questions) error {
	biggerStrongerQuestionsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerQuestionsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, questionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Type, data.Desc, data.Option, data.Answer, data.Summary, data.Id)
	}, biggerStrongerQuestionsIdKey)
	return err
}

func (m *defaultQuestionsModel) Delete(ctx context.Context, id int64) error {
	biggerStrongerQuestionsIdKey := fmt.Sprintf("%s%v", cacheBiggerStrongerQuestionsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, biggerStrongerQuestionsIdKey)
	return err
}

func (m *defaultQuestionsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheBiggerStrongerQuestionsIdPrefix, primary)
}

func (m *defaultQuestionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", questionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultQuestionsModel) tableName() string {
	return m.table
}
